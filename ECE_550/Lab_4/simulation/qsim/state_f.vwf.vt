// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/18/2021 00:27:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FSM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FSM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg in;
reg [2:0] state_C;
// wires                                               
wire [4:0] out;
wire [2:0] state_N;

// assign statements (if any)                          
FSM i1 (
// port map - connection between master ports and signals/registers   
	.in(in),
	.out(out),
	.state_C(state_C),
	.state_N(state_N)
);
initial 
begin 
#1000000 $finish;
end 

// in
initial
begin
	repeat(4)
	begin
		in = 1'b0;
		in = #100000 1'b1;
		# 100000;
	end
	in = 1'bX;
end 
// state_C[ 2 ]
initial
begin
	state_C[2] = 1'b0;
	state_C[2] = #400000 1'b1;
	state_C[2] = #400000 1'bX;
end 
// state_C[ 1 ]
initial
begin
	state_C[1] = 1'b1;
	state_C[1] = #200000 1'b0;
	state_C[1] = #200000 1'b1;
	state_C[1] = #200000 1'b0;
	state_C[1] = #200000 1'bX;
end 
// state_C[ 0 ]
initial
begin
	state_C[0] = 1'b0;
	state_C[0] = #200000 1'b1;
	state_C[0] = #200000 1'b0;
	state_C[0] = #200000 1'b1;
	state_C[0] = #200000 1'bX;
end 
endmodule

