// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Lite Edition"

// DATE "08/28/2021 22:27:02"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module two_bit_adder (
	a,
	b,
	cin,
	cout,
	sum);
input 	a;
input 	b;
input 	cin;
output 	cout;
output 	sum;

// Design Ports Information
// cout	=>  Location: PIN_V2,	 I/O Standard: 2.5 V,	 Current Strength: Default
// sum	=>  Location: PIN_V1,	 I/O Standard: 2.5 V,	 Current Strength: Default
// b	=>  Location: PIN_V3,	 I/O Standard: 2.5 V,	 Current Strength: Default
// cin	=>  Location: PIN_V4,	 I/O Standard: 2.5 V,	 Current Strength: Default
// a	=>  Location: PIN_U2,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("two_bit_adder_7_1200mv_85c_v_slow.sdo");
// synopsys translate_on

wire \cout~output_o ;
wire \sum~output_o ;
wire \cin~input_o ;
wire \b~input_o ;
wire \a~input_o ;
wire \or1~0_combout ;
wire \xor2~0_combout ;


// Location: IOOBUF_X0_Y28_N16
cycloneive_io_obuf \cout~output (
	.i(\or1~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\cout~output_o ),
	.obar());
// synopsys translate_off
defparam \cout~output .bus_hold = "false";
defparam \cout~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y28_N23
cycloneive_io_obuf \sum~output (
	.i(\xor2~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\sum~output_o ),
	.obar());
// synopsys translate_off
defparam \sum~output .bus_hold = "false";
defparam \sum~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X0_Y29_N15
cycloneive_io_ibuf \cin~input (
	.i(cin),
	.ibar(gnd),
	.o(\cin~input_o ));
// synopsys translate_off
defparam \cin~input .bus_hold = "false";
defparam \cin~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y29_N22
cycloneive_io_ibuf \b~input (
	.i(b),
	.ibar(gnd),
	.o(\b~input_o ));
// synopsys translate_off
defparam \b~input .bus_hold = "false";
defparam \b~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y30_N1
cycloneive_io_ibuf \a~input (
	.i(a),
	.ibar(gnd),
	.o(\a~input_o ));
// synopsys translate_off
defparam \a~input .bus_hold = "false";
defparam \a~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X1_Y29_N16
cycloneive_lcell_comb \or1~0 (
// Equation(s):
// \or1~0_combout  = (\cin~input_o  & ((\b~input_o ) # (\a~input_o ))) # (!\cin~input_o  & (\b~input_o  & \a~input_o ))

	.dataa(\cin~input_o ),
	.datab(\b~input_o ),
	.datac(gnd),
	.datad(\a~input_o ),
	.cin(gnd),
	.combout(\or1~0_combout ),
	.cout());
// synopsys translate_off
defparam \or1~0 .lut_mask = 16'hEE88;
defparam \or1~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X1_Y29_N18
cycloneive_lcell_comb \xor2~0 (
// Equation(s):
// \xor2~0_combout  = \cin~input_o  $ (\b~input_o  $ (\a~input_o ))

	.dataa(\cin~input_o ),
	.datab(\b~input_o ),
	.datac(gnd),
	.datad(\a~input_o ),
	.cin(gnd),
	.combout(\xor2~0_combout ),
	.cout());
// synopsys translate_off
defparam \xor2~0 .lut_mask = 16'h9966;
defparam \xor2~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign cout = \cout~output_o ;

assign sum = \sum~output_o ;

endmodule
