// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/28/2021 21:07:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] in0;
reg [5:0] in1;
reg [5:0] in2;
reg [5:0] in3;
reg [5:0] in4;
reg [5:0] in5;
reg [5:0] in6;
reg [5:0] in7;
reg [5:0] in8;
reg [5:0] in9;
reg [5:0] in10;
reg [5:0] in11;
reg [5:0] in12;
reg [5:0] in13;
reg [5:0] in14;
reg [5:0] in15;
reg [3:0] select;
// wires                                               
wire [5:0] out;

// assign statements (if any)                          
mux_32 i1 (
// port map - connection between master ports and signals/registers   
	.in0(in0),
	.in1(in1),
	.in2(in2),
	.in3(in3),
	.in4(in4),
	.in5(in5),
	.in6(in6),
	.in7(in7),
	.in8(in8),
	.in9(in9),
	.in10(in10),
	.in11(in11),
	.in12(in12),
	.in13(in13),
	.in14(in14),
	.in15(in15),
	.out(out),
	.select(select)
);
initial 
begin 
#1000000 $finish;
end 
// in0[ 5 ]
initial
begin
	in0[5] = 1'b0;
end 
// in0[ 4 ]
initial
begin
	in0[4] = 1'b0;
end 
// in0[ 3 ]
initial
begin
	in0[3] = 1'b0;
end 
// in0[ 2 ]
initial
begin
	in0[2] = 1'b0;
end 
// in0[ 1 ]
initial
begin
	in0[1] = 1'b0;
end 
// in0[ 0 ]
initial
begin
	in0[0] = 1'b1;
end 
// in1[ 5 ]
initial
begin
	in1[5] = 1'b0;
end 
// in1[ 4 ]
initial
begin
	in1[4] = 1'b0;
end 
// in1[ 3 ]
initial
begin
	in1[3] = 1'b0;
end 
// in1[ 2 ]
initial
begin
	in1[2] = 1'b0;
end 
// in1[ 1 ]
initial
begin
	in1[1] = 1'b1;
end 
// in1[ 0 ]
initial
begin
	in1[0] = 1'b0;
end 
// in2[ 5 ]
initial
begin
	in2[5] = 1'b0;
end 
// in2[ 4 ]
initial
begin
	in2[4] = 1'b0;
end 
// in2[ 3 ]
initial
begin
	in2[3] = 1'b0;
end 
// in2[ 2 ]
initial
begin
	in2[2] = 1'b0;
end 
// in2[ 1 ]
initial
begin
	in2[1] = 1'b1;
end 
// in2[ 0 ]
initial
begin
	in2[0] = 1'b1;
end 
// in3[ 5 ]
initial
begin
	in3[5] = 1'b0;
end 
// in3[ 4 ]
initial
begin
	in3[4] = 1'b0;
end 
// in3[ 3 ]
initial
begin
	in3[3] = 1'b0;
end 
// in3[ 2 ]
initial
begin
	in3[2] = 1'b1;
end 
// in3[ 1 ]
initial
begin
	in3[1] = 1'b0;
end 
// in3[ 0 ]
initial
begin
	in3[0] = 1'b0;
end 
// in4[ 5 ]
initial
begin
	in4[5] = 1'b0;
end 
// in4[ 4 ]
initial
begin
	in4[4] = 1'b0;
end 
// in4[ 3 ]
initial
begin
	in4[3] = 1'b0;
end 
// in4[ 2 ]
initial
begin
	in4[2] = 1'b1;
end 
// in4[ 1 ]
initial
begin
	in4[1] = 1'b0;
end 
// in4[ 0 ]
initial
begin
	in4[0] = 1'b1;
end 
// in5[ 5 ]
initial
begin
	in5[5] = 1'b0;
end 
// in5[ 4 ]
initial
begin
	in5[4] = 1'b0;
end 
// in5[ 3 ]
initial
begin
	in5[3] = 1'b0;
end 
// in5[ 2 ]
initial
begin
	in5[2] = 1'b0;
end 
// in5[ 1 ]
initial
begin
	in5[1] = 1'b0;
end 
// in5[ 0 ]
initial
begin
	in5[0] = 1'b0;
end 
// in6[ 5 ]
initial
begin
	in6[5] = 1'b0;
end 
// in6[ 4 ]
initial
begin
	in6[4] = 1'b0;
end 
// in6[ 3 ]
initial
begin
	in6[3] = 1'b0;
end 
// in6[ 2 ]
initial
begin
	in6[2] = 1'b0;
end 
// in6[ 1 ]
initial
begin
	in6[1] = 1'b0;
end 
// in6[ 0 ]
initial
begin
	in6[0] = 1'b0;
end 
// in7[ 5 ]
initial
begin
	in7[5] = 1'b0;
end 
// in7[ 4 ]
initial
begin
	in7[4] = 1'b0;
end 
// in7[ 3 ]
initial
begin
	in7[3] = 1'b0;
end 
// in7[ 2 ]
initial
begin
	in7[2] = 1'b0;
end 
// in7[ 1 ]
initial
begin
	in7[1] = 1'b0;
end 
// in7[ 0 ]
initial
begin
	in7[0] = 1'b0;
end 
// in8[ 5 ]
initial
begin
	in8[5] = 1'b0;
end 
// in8[ 4 ]
initial
begin
	in8[4] = 1'b0;
end 
// in8[ 3 ]
initial
begin
	in8[3] = 1'b0;
end 
// in8[ 2 ]
initial
begin
	in8[2] = 1'b0;
end 
// in8[ 1 ]
initial
begin
	in8[1] = 1'b0;
end 
// in8[ 0 ]
initial
begin
	in8[0] = 1'b0;
end 
// in9[ 5 ]
initial
begin
	in9[5] = 1'b0;
end 
// in9[ 4 ]
initial
begin
	in9[4] = 1'b0;
end 
// in9[ 3 ]
initial
begin
	in9[3] = 1'b0;
end 
// in9[ 2 ]
initial
begin
	in9[2] = 1'b0;
end 
// in9[ 1 ]
initial
begin
	in9[1] = 1'b0;
end 
// in9[ 0 ]
initial
begin
	in9[0] = 1'b0;
end 
// in10[ 5 ]
initial
begin
	in10[5] = 1'b0;
end 
// in10[ 4 ]
initial
begin
	in10[4] = 1'b0;
end 
// in10[ 3 ]
initial
begin
	in10[3] = 1'b0;
end 
// in10[ 2 ]
initial
begin
	in10[2] = 1'b0;
end 
// in10[ 1 ]
initial
begin
	in10[1] = 1'b0;
end 
// in10[ 0 ]
initial
begin
	in10[0] = 1'b0;
end 
// in11[ 5 ]
initial
begin
	in11[5] = 1'b0;
end 
// in11[ 4 ]
initial
begin
	in11[4] = 1'b0;
end 
// in11[ 3 ]
initial
begin
	in11[3] = 1'b0;
end 
// in11[ 2 ]
initial
begin
	in11[2] = 1'b0;
end 
// in11[ 1 ]
initial
begin
	in11[1] = 1'b0;
end 
// in11[ 0 ]
initial
begin
	in11[0] = 1'b0;
end 
// in12[ 5 ]
initial
begin
	in12[5] = 1'b0;
end 
// in12[ 4 ]
initial
begin
	in12[4] = 1'b0;
end 
// in12[ 3 ]
initial
begin
	in12[3] = 1'b0;
end 
// in12[ 2 ]
initial
begin
	in12[2] = 1'b0;
end 
// in12[ 1 ]
initial
begin
	in12[1] = 1'b0;
end 
// in12[ 0 ]
initial
begin
	in12[0] = 1'b0;
end 
// in13[ 5 ]
initial
begin
	in13[5] = 1'b0;
end 
// in13[ 4 ]
initial
begin
	in13[4] = 1'b0;
end 
// in13[ 3 ]
initial
begin
	in13[3] = 1'b0;
end 
// in13[ 2 ]
initial
begin
	in13[2] = 1'b0;
end 
// in13[ 1 ]
initial
begin
	in13[1] = 1'b0;
end 
// in13[ 0 ]
initial
begin
	in13[0] = 1'b0;
end 
// in14[ 5 ]
initial
begin
	in14[5] = 1'b0;
end 
// in14[ 4 ]
initial
begin
	in14[4] = 1'b0;
end 
// in14[ 3 ]
initial
begin
	in14[3] = 1'b0;
end 
// in14[ 2 ]
initial
begin
	in14[2] = 1'b0;
end 
// in14[ 1 ]
initial
begin
	in14[1] = 1'b0;
end 
// in14[ 0 ]
initial
begin
	in14[0] = 1'b0;
end 
// in15[ 5 ]
initial
begin
	in15[5] = 1'b0;
end 
// in15[ 4 ]
initial
begin
	in15[4] = 1'b0;
end 
// in15[ 3 ]
initial
begin
	in15[3] = 1'b0;
end 
// in15[ 2 ]
initial
begin
	in15[2] = 1'b0;
end 
// in15[ 1 ]
initial
begin
	in15[1] = 1'b0;
end 
// in15[ 0 ]
initial
begin
	in15[0] = 1'b0;
end 
// select[ 3 ]
initial
begin
	select[3] = 1'b0;
	select[3] = #250000 1'b1;
	select[3] = #240000 1'b0;
end 
// select[ 2 ]
initial
begin
	select[2] = 1'b0;
	select[2] = #130000 1'b1;
	select[2] = #120000 1'b0;
	select[2] = #120000 1'b1;
	select[2] = #120000 1'b0;
end 
// select[ 1 ]
initial
begin
	select[1] = 1'b0;
	select[1] = #61307 1'b1;
	select[1] = #68693 1'b0;
	select[1] = #60000 1'b1;
	select[1] = #60000 1'b0;
	select[1] = #60000 1'b1;
	select[1] = #60000 1'b0;
	select[1] = #60000 1'b1;
	select[1] = #60000 1'b0;
end 
// select[ 0 ]
initial
begin
	select[0] = 1'b0;
	select[0] = #31963 1'b1;
	select[0] = #29344 1'b0;
	select[0] = #38693 1'b1;
	select[0] = #30000 1'b0;
	select[0] = #30000 1'b1;
	select[0] = #30000 1'b0;
	select[0] = #30000 1'b1;
	select[0] = #30000 1'b0;
	select[0] = #30000 1'b1;
	select[0] = #30000 1'b0;
	select[0] = #30000 1'b1;
	select[0] = #30000 1'b0;
	select[0] = #30000 1'b1;
	select[0] = #30000 1'b0;
	select[0] = #30000 1'b1;
	select[0] = #30000 1'b0;
end 
endmodule

