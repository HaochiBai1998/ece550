// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Lite Edition"

// DATE "09/02/2021 16:02:09"

// 
// Device: Altera EP4CE115F29C7 Package FBGA780
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module two_bit_adder (
	a,
	b,
	cin,
	out,
	cout);
input 	[0:1] a;
input 	[0:1] b;
input 	cin;
output 	[0:1] out;
output 	cout;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \out[1]~output_o ;
wire \out[0]~output_o ;
wire \cout~output_o ;
wire \b[1]~input_o ;
wire \a[1]~input_o ;
wire \b[0]~input_o ;
wire \cin~input_o ;
wire \a[0]~input_o ;
wire \fa1|or1~0_combout ;
wire \fa2|xor2~combout ;
wire \fa1|xor2~0_combout ;
wire \fa2|or1~0_combout ;


cycloneive_io_obuf \out[1]~output (
	.i(\fa2|xor2~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \out[1]~output .bus_hold = "false";
defparam \out[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \out[0]~output (
	.i(\fa1|xor2~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\out[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \out[0]~output .bus_hold = "false";
defparam \out[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \cout~output (
	.i(\fa2|or1~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\cout~output_o ),
	.obar());
// synopsys translate_off
defparam \cout~output .bus_hold = "false";
defparam \cout~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \b[1]~input (
	.i(b[1]),
	.ibar(gnd),
	.o(\b[1]~input_o ));
// synopsys translate_off
defparam \b[1]~input .bus_hold = "false";
defparam \b[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \a[1]~input (
	.i(a[1]),
	.ibar(gnd),
	.o(\a[1]~input_o ));
// synopsys translate_off
defparam \a[1]~input .bus_hold = "false";
defparam \a[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \b[0]~input (
	.i(b[0]),
	.ibar(gnd),
	.o(\b[0]~input_o ));
// synopsys translate_off
defparam \b[0]~input .bus_hold = "false";
defparam \b[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \cin~input (
	.i(cin),
	.ibar(gnd),
	.o(\cin~input_o ));
// synopsys translate_off
defparam \cin~input .bus_hold = "false";
defparam \cin~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \a[0]~input (
	.i(a[0]),
	.ibar(gnd),
	.o(\a[0]~input_o ));
// synopsys translate_off
defparam \a[0]~input .bus_hold = "false";
defparam \a[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \fa1|or1~0 (
// Equation(s):
// \fa1|or1~0_combout  = (\b[0]~input_o  & ((\cin~input_o ) # (\a[0]~input_o ))) # (!\b[0]~input_o  & (\cin~input_o  & \a[0]~input_o ))

	.dataa(\b[0]~input_o ),
	.datab(\cin~input_o ),
	.datac(\a[0]~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\fa1|or1~0_combout ),
	.cout());
// synopsys translate_off
defparam \fa1|or1~0 .lut_mask = 16'hE8E8;
defparam \fa1|or1~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \fa2|xor2 (
// Equation(s):
// \fa2|xor2~combout  = \b[1]~input_o  $ (\a[1]~input_o  $ (\fa1|or1~0_combout ))

	.dataa(\b[1]~input_o ),
	.datab(\a[1]~input_o ),
	.datac(\fa1|or1~0_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\fa2|xor2~combout ),
	.cout());
// synopsys translate_off
defparam \fa2|xor2 .lut_mask = 16'h9696;
defparam \fa2|xor2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \fa1|xor2~0 (
// Equation(s):
// \fa1|xor2~0_combout  = \b[0]~input_o  $ (\cin~input_o  $ (\a[0]~input_o ))

	.dataa(\b[0]~input_o ),
	.datab(\cin~input_o ),
	.datac(\a[0]~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\fa1|xor2~0_combout ),
	.cout());
// synopsys translate_off
defparam \fa1|xor2~0 .lut_mask = 16'h9696;
defparam \fa1|xor2~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \fa2|or1~0 (
// Equation(s):
// \fa2|or1~0_combout  = (\b[1]~input_o  & ((\a[1]~input_o ) # (\fa1|or1~0_combout ))) # (!\b[1]~input_o  & (\a[1]~input_o  & \fa1|or1~0_combout ))

	.dataa(\b[1]~input_o ),
	.datab(\a[1]~input_o ),
	.datac(\fa1|or1~0_combout ),
	.datad(gnd),
	.cin(gnd),
	.combout(\fa2|or1~0_combout ),
	.cout());
// synopsys translate_off
defparam \fa2|or1~0 .lut_mask = 16'hE8E8;
defparam \fa2|or1~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign out[1] = \out[1]~output_o ;

assign out[0] = \out[0]~output_o ;

assign cout = \cout~output_o ;

endmodule
